#include<stdio.h>
#include<string.h>
#include<stdlib.h>
struct node{
   int data;
   struct node *next;
};
void ini(struct node *ptr)
{
  int temp;
  printf("ENTER THE NUMBER TO ADD TO FIRST NODE :- ");
  scanf("%d",&temp);
  ptr->data=temp;
  ptr->next=NULL;
}
struct node* anode(struct node *ptr,int n)
{
  int temp;
  printf("ENTER THE NUMBER TO ADD TO NODE :- ");
  scanf("%d",&temp);
  if(n==1)
  {
  ptr->next=(struct node*)malloc(sizeof(struct node*));
  ptr->next->data=temp;
  ptr->next->next=NULL;
  return ptr->next;
  }
  else{
     struct node *curr=(struct node *)malloc(sizeof(struct node));
     curr->data=temp;
     curr->next=ptr;
     return curr;
  }
}

struct node * dnode(struct node *ptr,int n)
{
  if(n==1)
  {
    struct node *curr=ptr;
    while(curr->next->next!=NULL)
    {
      curr=curr->next;
    }
    curr->next=NULL;
    return curr;
  }
  else{
    return ptr->next;
  }
}
void itr(struct node *ptr)
{
  printf("CURRENT LINKED LIST IS :- ");
  struct node *current=ptr;
  while(current->next!=NULL)
  {
    printf("%d ",current->data);
    current=current->next;
  }
  printf("%d\n",current->data);
}
void find(struct node *ptr)
{
  int num,count=0;
  printf("ENTER INDEX OF NUMBER :- ");
  scanf("%d",&num);
  struct node *curr=ptr;  
  while(curr->next!=NULL)
  {
    if(num==count)
    {
      printf("%d ",curr->data);
      break;
    }
    count++;
  }
}
int main()
{
  struct node *start=(struct node*)malloc(sizeof(struct node*));
  struct node *cptr=start;
  ini(start);
  int temp,t2;
  here:
  printf("ENTER 1 TO ADD NEW NODE , 2 TO ITERATE , 3 TO DELETE , 4 TO FIND ANY ELEMENT USING INDEX , ANYTHING ELSE TO EXIT :- ");
  scanf("%d",&temp);
  if(temp==1)
  {
    printf("ENTER 1 TO ADD FROM END , 2 TO ADD FROM FRONT :- ");
    scanf("%d",&t2);
    if(t2==1)
    {
    cptr=anode(cptr,1);
    }
    else if(t2==2)
    {
      start=anode(start,2);
    }
    else{
      printf("INVALID INPUT!!!!!!!!!!");
    }
  }
  else if(temp==2)
  {
    itr(start);
  }
  else if(temp==3)
  {
    printf("ENTER 1 TO DELETE FROM END , 2 TO DELETE FROM FRONT :- ");
    scanf("%d",&t2);
    if(t2==1)
    {
      cptr=dnode(start,1);
    }
    else if(t2==2)
    {
      start=dnode(start,2);
    }
    else{
      printf("INVALID INPUT !!!!!!!\n");
    }
  }
  else if(temp==4)
  {
    find(start);
  }
  else{
    exit(0);
  }
  goto here;
  return 0;
}
